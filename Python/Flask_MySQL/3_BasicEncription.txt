Basic Encryption

Goal: need to secure our data -> Internet hackers are notorious for trying to guess passwords and generally just make a mess of things.
- Imagine if a user's password was stored as-is on a database somewhere and a hacker got a hold of it.
- We encrypt users' passwords before we put them into our database.

Basic md5 encryption (Basic way to excrypt something):
- Md5 encryption is a technique that takes an input (most likely a password) and returns an encrypted string.

Example how to put encrytion in your server.py:

                    import md5 # imports the md5 module to generate a hash
                    password = 'password';
                                                                            # encrypt the password we provided as 32 character string
                    encrypted_password = md5.new(password).hexdigest();
                    print encrypted_password;                                #this will show you the encrypted value
                                                                            # 5f4dcc3b5aa765d61d8327deb882cf99 -> nice!

Why use md5?
* The md5 function returns an encrypted version of the parameter it is passed.
* The md5 function yields the same value every time it is run with the same argument.
    -> That means the value it spits back is not random -- it is encrypted.
* md5 algorithm is well known and solvable but it is very strong in the sense that it is not easily reverse engineered
* Md5 is not the industry standard but it is a good starting point.

How to use md5?
* When you add your users to the database upon registration, you should save their passwords as an encrypted md5 string.
* When they log in, you should encrypt the inputted password to make sure it matches with the one saved in the database.

ie.
The user being put into your database:

                    import md5                                                 # do this at the top of your file where you import modules
                    @app.route('/users/create', methods=['POST'])
                    def create_user():
                         username = request.form['username']
                         email = request.form['email']
                         password = md5.new(request.form['password']).hexdigest();
                         insert_query = "INSERT INTO users (username, email, password, created_at, updated_at) VALUES (:username,
                         :email, :password, NOW(), NOW())"
                         query_data = { 'username': username, 'email': email, 'password': password }
                         mysql.query_db(insert_query, query_data)

When your user is trying to log in:

                     password = md5.new(request.form['password']).hexdigest()
                     email = request.form['email']
                     user_query = "SELECT * FROM users where users.email = :email AND users.password = :password"
                     query_data = { 'email': email, 'password': password}
                     user = mysql.query_db(user_query, query_data)
                                                                                # do the necessary logic to login if the user exists,
                                                                                otherwise redirect to login page with error message<br>
Salted encryption ~
* While md5 is an easy encryption method and safe for small-time projects, it is not secure enough for enterprise-level applications.
* To really secure your data, you need to make the encryption method more random.->(More unpredictable)
*to to make our encryption more powerful, we will encrypt our data by using what is called a [salt] -> "unique" key use to generate unique password.

Example:
                    salt = '123'; //where the value 123 changes randomly
                    encrypted_password = md5(password . '' . salt);

* A salt is a string of random characters that will be passed to an encryption method (an md5())
    along with the string we are trying to encrypt (the submitted password) via concatenation.

Generating a salt ~
* The code below actually uses two different functions to render a random string:

                    import os, binascii                                         # include this at the top of your file
                    salt = binascii.b2a_hex(os.urandom(15))

* The function called os.urandom() returns a string of bytes.
* The number of bytes is equal to the parameter provided.
* This string isn't a normal alphanumeric string, so we turn it into a string using the function b2a_hex()
                -  will turn the value returned from the openSSL function into a normal alphanumeric string.

The idea is to store this salt during the registration process. Example:

                    username = request.form['username']
                    email = request.form['email']
                    password = request.form['password']
                    salt =  binascii.b2a_hex(os.urandom(15))
                    encrypted_pw = md5.new(password + salt).hexdigest()
                    insert_query = "INSERT INTO users (username, email, password, salt, created_at, updated_at)
                    VALUES (:username, :email, :encrypted_pw, :salt, NOW(), NOW())"
                    query_data = { 'username': username, 'email': email, 'encrypted_pw': encrypted_pw, 'salt': salt}
                    mysql.query_db(insert_query, query_data)

* When we are trying to authenticate a user's login, we do some pretty nifty stuff:

                    email = request.form['email']
                    password = request.form['password']
                    user_query = "SELECT * FROM users WHERE users.email = :email LIMIT 1"
                    query_data = {'email': email}
                    user = mysql.query_db(user_query, query_data)
                    if user[0]:
                     encrypted_password = md5.new(password + user[0]['salt']).hexdigest();
                     if user[0]['password'] == encrypted_password:
                        # this means we have a successful login!
                     else:
                         # invalid password!
                    else:
                        # invalid email!

INSTALL: We can use bcrypt which is a powerful module that helps us to encrypt our passwords in a secure way!

                    pip install flask-bcrypt

Now to use bcrypt in our Flask Apps we can do this:

                    from flask import Flask, request, render_template
                    from mysqlconnection import MySQLConnector
                                                                            # imports the Bcrypt module
                    from flask.ext.bcrypt import Bcrypt
                    app = Flask(__name__)
                    bcrypt = Bcrypt(app)
                    mysql = MySQLConnector(app, 'my_database_here')
                                                                            # this will load a page that has 2 forms one for registration and login
                    @app.route('/', methods=['GET'])
                    def index():
                     return render_template('index.html')
                                                                            # we are going to add functions to create new users and login users

Generate_password_hash ~
* Bcrypt has a handy password hash generator function that we can use when creating new users:
    - put in create function:

                    @app.route('/create_user', methods=['POST'])
                    def create_user():
                    email = request.form['email']
                    username = request.form['username']
                    password = request.form['password']
                                                                            # run validations and if they are successful we can
                                                                                create the password hash with bcrypt
                    pw_hash = bcrypt.generate_password_hash(password)
                                                                            # now we insert the new user into the database
                    insert_query = "INSERT INTO users (email, username, pw_hash, created_at) VALUES (:email, :username, :pw_hash, NOW())"
                    query_data = { 'email': email, 'username': username, 'pw_hash': pw_hash }
                    mysql.query_db(insert_query, query_data)
                                                                            # redirect to success page
Check_password_hash ~
* The check_password_hash function will return true if the hashed value of password provided at login is equal to
    the password hash in the database. Otherwise, it will return false:

                    password = 'password'
                    pw_hash = bcrypt.generate_password_hash(password)
                    test_password_1 = 'thisiswrong'
                    bcrypt.check_password_hash(pw_hash, test_password_1)        # this will return false
                    test_password_2 = 'password'
                    bcrypt.check_password_hash(pw_hash, test_password_2)        # this will return true

Now to use this when trying to login we might do it like so:
                    @app.route('/login', methods=['POST'])
                    def login():
                    email = request.form['email']
                    password = request.form['password']
                    user_query = "SELECT * FROM users WHERE email = :email LIMIT 1"
                    query_data = { 'email': email }
                    user = mysql.query_db(user_query, query_data) # user will be returned in a list
                    if bcrypt.check_password_hash(user[0]['pw_hash'], password):
                                                                                # login user
                    else:
                                                                                # set flash error message and redirect to login page

!IMPORTANT NOTES!
* When you create your database, make sure your column pw_hash is of type varchar(255)
    - Bcrypt hashes are quite long, so this prevents any errors from the hashed password being truncated.
* Do not store the user-entered (human-readable or 'clear-text') password in the database.
