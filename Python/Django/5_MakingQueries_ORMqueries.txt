Database Queries
* Dealing with tabs in in the Model.
* Django has a relatively easy to use Object Relationship Mapper (ORM) to help us make queries simply and cleanly.
*  Django has to convert the ORM command into SQL, which adds a bit more overhead to the process.
* Others only use the ORM, accepting the slight performance hit in exchange for being to write code in Python with Python syntax.

The Object Relational Mapper (ORM) ~
* Django models come pre-equipped to communicate with your views via a method called objects.
* Objects is an instance of the Django ORM class that does our DB communication â€“ OOP is everywhere!

Use following modle.py graph for example:
                                                                # Inside models.py
    from __future__ import unicode_literals
    from django.db import models
                                                                # Create your models here.
    class User(models.Model):
        first_name = models.CharField(max_length=45)
        last_name = models.CharField(max_length=45)
        password = models.CharField(max_length=100)
        created_at = models.DateTimeField(auto_now_add = True)
        updated_at = models.DateTimeField(auto_now = True)

Now look at the views.py:
** The following code will work great the first time you hit a route that calls the index function. But if you refresh the page, it crashes!
    Follow the code below to prevent breaking code at your views.py file:

                                                                # Inside your app's views.py file
    from django.shortcuts import render, HttpResponse
                                                                # Pull the User class into the file
    from .models import User
    def index(request):
        print(User.objects.all())
                                                                # A list of objects (or an empty list)
        User.objects.create(first_name="mike",last_name="mike",password="1234asdf")
                                                                # Creates a user object
        print(User.objects.all())
                                                                # A list of objects (or an empty list)
        u = User.objects.get(id=1)
        print(u.first_name)
        u.first_name = "Joey"
        u.save()
        j = User.objects.get(id=1)
        print(j.first_name)
                                                                # Gets the user with an id of 1, changes name and saves to DB, then retrieves again...
        print(User.objects.get(first_name="mike"))
                                                                # Gets the user with a first_name of 'mike' *** THIS MIGHT NEED TO BE CHANGED ***
        users = User.objects.raw("SELECT * from my_app_name_user")
                                                                # Uses raw SQL query to grab all users (equivalent to User.objects.all()), which we iterate through below
        for user in users:
          print user.first_name
        return HttpResponse("ok")

Know that this line:
                    print(User.objects.raw("SELECT * from my_app_name_user"))

* Relies on the fact that Django builds our database's tables according to a particular format ( app_name + _ + lowercase_model_name).
**  If you're ever making a raw query and aren't sure what the table name is, you can always find it by printing the following: User._meta.db_table

Setting up the ORM ~
* First Build out the cheatsheet project.

- at settings.py -> add django_extensions and your app folder name.
- after you done your model remember to make migration.

* Using the Models
    - Whatever in your action of html, it will first go to your urls.py
        - remember to add 's' at the end of the object you are calling
    - after urls, it will hit the template/views.py to get the action to work
    - make sure your views.py imports from model (ie. from . models import Blog, Comment)
    - # UsingORM:
        - Blog.objects.create(title=request.Post['title'], blog=request.POST['blog'])
    - # Insertinto blogs(title,blog, created_at, updated_at) values (title, blog,now(),Now())
        - after the blog part, return redirect('/')
    - # go back to your view.py index(request) -> to indicate where it will catch all the things you want on your database.
        - make your context dictionary:
            context = {
            "blogs": Blog.objects.all()
            #select * from Blog
            }
            return render(request, "app/index.html", context)           #add context at the return render
    - output all the blogs at html ie:
                                        {%for blog in blogs%}
                                        <h5>{{blog.title}}</h5>
                                        <p>{{blog.blog}}</p>
                                            {% endfor %}
    - add CSRF token at the html form for it to work.

ORM Queries~

For this section, we'll be using the following model:

class User(models.Model):
  first_name = models.CharField(max_length=25)
  last_name = models.CharField(max_length=25)
  age = models.IntegerField()
  created_at = models.DateTimeField(auto_now_add=True)
  updated_at = models.DateTimeField(auto_now=True)
  def __str__(self):
    return self.first_name + " " + self.last_name

magic method : tells Python what to do when we try to convert a User object into a string.
    -  they'll show as <User: Firstname Lastname> instead of <User: User object> (Quite convenient!)

GET :
    * .get(field="val") returns the one object that matches a given condition.
    - If we wanted the one user with last name "Thomas", we could say:
                                        user = User.objects.get(last_name="Thomas")
                                        print("QUERY RESULT:", user)
        output: terminal wewill see: QUERY RESULT: Clearance Thomas

    * However, if the condition is true for more than item, or zero items, using .get will throw an error.
    ** Only use .get if you know that there's only one matching item!

    - For this reason, this is a very good method to use with ID numbers:
                                        user = User.objects.get(id=6)
                                        print("QUERY RESULT:", user)
                    Outputs: Entire name of the user.

Filter :
    * .filter(field="val"...) returns all of the records where a given condition is true:
                                    user = User.objects.filter(last_name="Thomas")
                                    print("QUERY RESULT:", user)
                    Output: Query RESULT: <Queryset [<user: Clearance Thomas>]>
    * difference with .get:
        - .get returns the object itself, while .filter returns a QuerySet (a special type of list that holds Django objects)
        - ...we would get an error, because a QuerySet doesn't have a .first_name
        - However, because it's returning a QuerySet and not an object, .filter has no problem if there's not exactly one matching record.

Exclude :
    * .exclude(field="val"...) is the opposite of .filter: It returns all of the records where a given condition is false.
    * ie. Here's every user NOT surnamed "Thomas":
                                    user = User.objects.exclude(last_name="Thomas")
                                    print("QUERY RESULT:", user)
                    Output: returns all the users that doesn't have Thomas as surname

Conditions :
    * You can do a more complicated search than just if a given field is equal to a given value.
    * Instead of just passing in the field name as a keyword argument to .get, .filter, or .exclude, you'd pass the field name__lookup type.
        - Example of searching first name beginning with 'S':

                                    user = User.objects.filter(first_name__startswith="S")
                                    print("QUERY RESULT:", user)

        - Can also search for people using exclude 's':

                                  user = User.objects.exclude(first_name__contains="S")
                                  print("QUERY RESULT:", user)
        - Every user older than 80:

                                  user = User.objects.filter(age__gt=80)
                                  print("QUERY RESULT:", user)
        - Every user 80 or older (see the difference?):
If it's the same type of query, instead of being chained you can multiple arguments to the function:
                                ie.
                                    user = User.objects.filter(age__gte=80)
                                    print("QUERY RESULT:", user)
Combining queries ~
Queries can be chained together:
                                    user = User.objects.filter(last_name__contains="o").exclude(first_name__contains="o")
                                    print("QUERY RESULT:", user)

If it's the same type of query, instead of being chained you can multiple arguments to the function:
                                ie.
                                      user = User.objects.filter(age__lt=70, first_name__startswith="S")
                                      print("QUERY RESULT:", user)

If you want OR, as in users who are younger than 70 OR whose first_name starts with "S", you can use | (the set union operator):
                                ie.
                                       user = User.objects.filter(age__lt=70)|User.objects.filter(first_name__startswith="S")
                                       print("QUERY RESULT:", user)

Displaying on Templates ~

* So far, we've only printed these objects to our terminal. However, it's not difficult to display this information on a template.
    How do we pass information from our view function into a template? With a context dictionary!
    ie. at views.py:
                                def index(request):
                                    users = User.objects.filter(age__lt=70)|User.objects.filter(first_name__startswith="S")
                                    context = {"users": users}
                                    return render(request, "users/index.html", context)

    * On the template, we can use a for-loop to go over this data on our html:

                                <h1>Users</h1>
                                <table>
                                  <tr>
                                    <th>ID</th>
                                    <th>First Name</th>
                                    <th>Last Name</th>
                                    <th>Age</th>
                                  </tr>
                                  {% for user in users %}
                                    <tr>
                                      <td>{{user.id}}</td>
                                      <td>{{user.first_name}}</td>
                                      <td>{{user.last_name}}</td>
                                      <td>{{user.age}}</td>
                                    </tr>
                                  {% endfor %}
                                </table>

Playing around with ORM:
* playing the object methods inside of the class.
- to go to each individual blogs by id:
    * at HTML form's action add"
                                action = "/comment/{{blog.id}}"

- use route to catch this parameter.
    * at urls.py ->
                    url(r'^comments/(?P<id>id+)$', views.comments)
            -> ?P => capture group
            -> \d => get any number that is a digit that is in the capture group.

- at views.py:

                def comments(request, id):              # remember to at the id at the paremeter to catch the id in the route with
                    blog= Blog.objects.get(id=id)
                    Comment.object.create(comment=request.POST['comment'], blog=blog)       # look into our model.py and see where the blog is coming from. Will automatically strip things out from model.
                    return redirect('/')
* will show at our terminal.

Make it show in the browser:
* two way binding with DJango helps us get users in blog and user in comments.

- go to index.html
    -> many relationship, blog has a lot of comments, do a forloop in html:

                    {% for comment in blog.comment_set.all %}
                                {{comment.comment}}
                                    {% endfor %}

* In the Django Tidbits Section, there are a few more pieces for ORM querying - feel free to check it out!
