Model Validations Intro ~

* Django has some prebuilt validations, which we are going to use along with some custom validations we'll write ourselves. (good news)

* Here's one potential routing structure you can use before we layer on prebuilt models and validations:

                                        # Inside your app's urls.py file
          url(r'^users', views.index)

Flask-Style Validations
* Let's start off with writing the sort of validations that you're already used to:

* First, let's make a User model.

                                        # Inside your app's models.py file
            from __future__ import unicode_literals
            from django.db import models
                                        # Create your models here.
            class User(models.Model):
                first_name = models.CharField(max_length=45)
                last_name = models.CharField(max_length=45)
                password = models.CharField(max_length=100)
                created_at = models.DateTimeField(auto_now_add = True)
                updated_at = models.DateTimeField(auto_now = True)

            """
            models come with a hidden key:
                  objects = models.Manager()
            we are going to overwrite this!
            """

* This User comes prebuilt with a property (objects) to reference the ORM so that we can do things like: User.objects.all().

** what if we wanted to do something like User.userManager.login(email, password)
and return a {response} a lot like we did when we tried to go to a route {'/login'} in Flask?

* To do this, we are going to make a new property for our User class and have that property be a reference to our manager.
    - Manager is just another class that we're going to instantiate and link to User

* call that new class UserManager and add it to our previous code:

            -> By inheriting from models.Model, User is made into a database table. models.Manager,
            however, means our UserManager will inherit from the ORM building class.

                                                    # Inside your app's models.py file
             from __future__ import unicode_literals
             from django.db import models
                                                #Our new manager!
                                                #No methods in our new manager should ever
                                                catch the whole request object with a parameter!!! (just parts, like request.POST)
             class UserManager(models.Manager):
                 def login(self, postData):
                     print "Running a login function!"
                     print "If successful login occurs, maybe return {'theuser':user} where user is a user object?")
                     print "If unsuccessful, maybe return { 'errors':['Login unsuccessful'] }"
                     pass
                 def register(self, postData):
                     print ("Register a user here")
                     print ("If successful, maybe return {'theuser':user} where user is a user object?")
                     print ("If unsuccessful do something like this? return {'errors':['User first name to short', 'Last name too short'] ")
                     pass
             class User(models.Model):
                 first_name = models.CharField(max_length=45)
                 last_name = models.CharField(max_length=45)
                 password = models.CharField(max_length=100)
                 created_at = models.DateTimeField(auto_now_add = True)
                 updated_at = models.DateTimeField(auto_now = True)

                 # *************************
                 # Connect an instance of UserManager to our User model overwriting
                 # the old hidden objects key with a new one with extra properties!!!
                 objects = UserManager()
                 # *************************

* Now in our views.py file, we can use User.objects.login and .register:

                                                    # Inside your app's views.py file
                from django.shortcuts import render, HttpResponse, redirect
                from .models import User/

                def index(request):
                    print("Running index method, calling out to User.")
                    user = User.objects.login("speros@codingdojo.com","Speros")
                                                    # DO NOT PASS THE WHOLE REQUEST OBJECT TO THE MODEL!!!
                    print (type(user))
                    if 'error' in user:
                        pass
                    if 'theuser' in user:
                        pass
                    return HttpResponse("Done running userManager method. Check your terminal console.")

* Feel free to play around with the UserManager methods.
    â€“ any change you make to that class does not need to be migrated since it's not a database table
