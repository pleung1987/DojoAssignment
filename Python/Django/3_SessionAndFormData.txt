Form Data
* When we were using Flask, we used the form property of the request object to access input values.

* Django behaves very similarly, except the property is request.POST if the method that hits the route is a post
    -> request.GET if the method that hits the route is a get

Aware of CSRF (Cross Server Request Forgery)
-> add {% csrf_token %} in each POST form that targets internal URL to fix problem. Put in under your form element at the html form.



Example:
                <form action="/new_user" method="post">
                 {% csrf_token %}
                 <input type="text" name="first_name">
                 <input type="submit" value="submit">
                </form>

Don't forget to add the new url to ./vinmymvc/urls.py:

                 url(r'^new_user$',views.create)

In ./vinmymvc/views.py

                from django.shortcuts import render, redirect
                    def create(request):
                        if request.method == "POST":
                            print "*"*50
                            print request.POST
                            print request.method
                            print "*"*50
                            return redirect("/")
                        else:
                            return redirect("/")

Key Terms
* request.POST
    ->Data from POST request
* request.GET
    -> Data from GET request
* request.method
    -> Returns the method/HTTP verb associated with the request
* {% csrf_token %}
    -> Prevents cross-site request forgery (place it in a form on the HTML/template side of your project)

Session -> tweek with the migration py file to manage sessions

When you see the red error " You have unapplied migrations", its will affect the sessions functionality

* first thing: python manage.py makemigrations
    -> if it doesn't have any problem it will display: No changes detected

* Django doesn't use Jinja, but uses something similar to Jinja, don't use square bracket. type; {{session.request.name}}

How to use Session:

In our terminal, head to the directory where manage.py resides and run the following commands:

                                                    # Need to be in same directory as manage.py file
                    > python manage.py makemigrations
                    > python manage.py migrate

Not only does that annoying warning you’ve been suffering disappear, but now session is now available to us (as seen in that last line:
Applying sessions.0001_initial... OK).

Now we can restart our server and use session:

                        request.session              # It's a dictionary, so you can attach key/value pairs

Now, let's try out session. In your ./vinmymvc/views.py file, in the create function, add the following:

                        request.session['name'] = request.POST['first_name']

And in ./vinmymvc/index.html add the following in a line above your form:

                            {{request.session.name}}

Useful session methods:
* request.session['key']
    -> This will retrieve (get) the value stored in key
* request.session['key'] = 'value'
    -> Set the value that will be stored by key
* del request.session['key']
    -> Deletes a session key if it exists, throws a keyError if it doesn’t. Use along with try and except since it’s better to ask for
     forgiveness than permission
* 'key' in request.session
    -> Returns a boolean of whether a key is in session or not
* {{ request.session.name }}
    -> Use dot notation (.) to access request.session keys from templates since square brackets ([]) aren’t allowed there
