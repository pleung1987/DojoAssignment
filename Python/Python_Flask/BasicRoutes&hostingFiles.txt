Basic Routes

But what is a route?
- A route is a handler for a particular HTTP request.
- When an HTTP request hits a server the server checks to see whether it can handle the request (ie. a route)

that allows us to return the rendered HTML that we created:

from flask import Flask, render_template  # Import Flask to allow us to create our app, and import
                                          # render_template to allow us to render index.html.
app = Flask(__name__)                     # Global variable __name__ tells Flask whether or not we
                                          # are running the file directly or importing it as a module.
@app.route('/')                           # The "@" symbol designates a "decorator" which attaches the
                                          # following function to the '/' route. This means that
                                          # whenever we send a request to localhost:5000/ we will run
                                          # the following "hello_world" function.
def hello_world():
  return render_template('index.html')    # Render the template and return it!
app.run(debug=True)                       # Run the app in debug mode.

* Here you can see that we are handling the '/' route with the hello_world function which renders the index.html template.
  Here the HTTP verb is "GET".
 - If no route is explicitly mentioned, it is a GET route. GET routes will mostly be used for serving pages or rendering templates.

*flask only reads "template" folder.
*flask we put whatever html site we want to host on the server in the template folder if we use Flask.

ie. 2 html files we are hosting on:
from flask import Flask, render_template

app = Flask(__name__)

@app.route('/')                         # first main website host
def hello_world():
    return render_template('index.html')

@app.route('/success')                  # second website page hosted
def success():
	return render_template('success.html', var1= "testing1",var2="testing2")

app.run(debug=True)

* With our Flask templates, there are 2 special inputs that we can use to insert python code:
    {{ some variable }}   -> embed Jinja into html
    {% some expression %} -> if you embed code or python algorithm into the html.

            Example:
                From terminal~
                    from flask import Flask, render_template
                    app = Flask(__name__)
                    @app.route('/')
                    def index():
                      return render_template("index.html", phrase="hello", times=5)
                    app.run(debug=True)

                From HTML~
                    <!-- here is an example of embedding a for-loop in our code -->
                    {% for x in range(0,times): %}
                    <p>{{ phrase }}</p>
                    {% endfor %}

                    <!-- here is an example of embedding an if statement in our code -->
                    {% if phrase == "hello" %}
                    <p>The phrase says hello</p>
                    {% endif %}

Static Files
- Every framework will have its own way of serving static content.
  We'll do so by creating a folder inside of each of our projects labeled  static.
- This static folder will be used to serve all of your static content (stylesheets, images, JavaScript files, etc.)

            Example:
                <!-- linking a css style sheet -->
                <link rel="stylesheet" type="text/css" href="{{ url_for('static', filename='my_style_sheet.css') }}">
                <!-- linking a javascript file -->
                <script type="text/javascript" src="{{ url_for('static', filename='my_script.js') }}"></script>
                <!-- linking an image -->
                <img src="{{ url_for('static', filename='my_img.png') }}">

* Flask is configured to automatically look inside the static folder to look for our static content

Things to Note!:
    - All static content must go inside of the static folder
    - The folder must be named static
    - in order to reference the static content start at the relative path after static(static is from the root
    (also know as / or the same level as your server.py file
    - For example, if you have styles.css inside of the static folder your href would read "href='static/styles.css'"
