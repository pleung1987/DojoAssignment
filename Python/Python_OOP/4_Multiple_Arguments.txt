Multiple Arguments

* What if you want to pass in a variable number of arguments, or want to capture multiple arguments into a single parameter?

-> Placing an asterisk before the name of the parameter after the "normal'' parameters does just that.
* asterisk is called a 'splat' operator.

Example:

def varargs(arg1, *restOfArg):
print "Got "+arg1+" and "+ ", ".join(restOfArg)
varargs("one")	»	"Got one and "
varargs("one", "two")	»	"Got one and two"
varargs("one", "two", "three")	»	"Got one and two, three"

-> , the first argument is assigned to the first method parameter as usual.
-> he next parameter is prefixed with an asterisk(the "splat" operator we just introduced),
    which bundles the remaining arguments into a new tuple, which is then assigned to that parameter.

type(restOfArg) we would get:
                def varargs(arg1, *restOfArg):
                   print "restOfArg is of " + str(type(restOfArg))
                   varargs("one", "two", "three")
                                                    # OUTPUT: restOfArg is of <type 'tuple'>

Note the .join() method is called on a string that glues the values in the tuple together.
