Factories~

Moving Data:
    -> we will eventually get the data that goes into the controller into the database.
    -> In Angular, controllers are not responsible for obtaining data; they are only expected to pass data to the
    views by managing the $scope object.

Providers:
    -> In Angular, there are types of objects whose job is to provide data to the controllers.
        * these are intuitively named providers:
            - comes from 'Factories' and 'Services'
    -> Factories and services both have the same job:
        - provide data/information to controllers
        - but they do it slightly differently...

    NOTE: ***** 'Factories' return objects *****
          ***** 'Services' return in keywords, "new" and "this" to return objects ****

Let’s build a factory :
    ie. (have an angular factory)
        -> We gave it 2 keys, 1 ‘someKeyName’ which holds the value of ‘Some Value’ and another of ‘someMethodName’
         which holds a function as a value.


                myAppModule.factory('studentFactory', function(){
                     var factory = {};
                     factory.someKeyName = 'Some Value'
                     factory.someMethodName = function(){ /* Code Here */ }
                     return factory;
                })

    * Let’s say we are building an app that needs to be able to do basic CRUD (Create, Read, Update, Destroy) operations
        ->  We need to use a factory to provide data to our ninjasController

                                    // Create a module
            var myAppModule = angular.module('myApp', []);
                                    // Create a factory (attached to this module)
            myAppModule.factory('studentFactory', function (){
                                    // The factory is nothing more than a function that returns an object
            var students = [
                {name: 'Mike', age: 34},
                {name: 'John', age: 24},
                {name: 'Trey', age: 24}];
            var factory = {};
                                    // Add a getStudents key to the factory object with a value of a function.
            factory.getStudents = function (callback){
                                    // Pass the students to a callback to be used by whoever calls the method
                callback(students);
            }
                                    // Most important step: return the object so it can be used by the rest of our angular code
            return factory;
            });


                                    // Create a controller (attached to this module), and inject the studentFactory in it.
            myAppModule.controller('studentsController', ['$scope', 'studentFactory', function ($scope, studentFactory){
                                    //  initialize an empty array so $scope.students maintains a consistent data type
            $scope.students = [];
                                    // run the getStudents method and set $scope data in the callback
            studentFactory.getStudents(function (data){
                $scope.students = data;
                })
            }])

    * Things to keep in mind:
    1) The Factory:
        -> To create a factory, build a function that returns an object literal.
    2) Inject the Factory:
        -> Add the factory to the list of injections to the controller function, and give it a name in the parameters!

    * You can inject many services, and the same service can be injected into many controllers.
        -> Factories are what’s called a singleton.
        -> A singleton is an object that can be used in many places.
            -> But any time that singleton is called, the same object will be referenced in all cases.
            -> You can use a factory in as many controllers as you want and they will all utilize the same object.
    *  The callback is a great way to pass data from the factory to the controller.
        -> (this will be very important when we connect the server-side)
    * This separation of data and data logic (factory) from the controller is important.
        -> Modularization will keep our apps organized, and the singleton nature of the services will minimize the load times!

NOTE: Services often are injected into one another, but don’t inject controllers into one another
    ($scope will drive you crazy if you do!)!

Services~
Ones that we commonly use:

* $http:
    -> This service allows us to make AJAX calls to different API’s (in our case: our server!).

* $location:
    -> This service allows us to change the window URL using JavaScript.

* $timeout and $interval:
    -> These services are akin to window.setTimeout and window.setInterval, so are useful for generating timers.

* Add-ons Have Other Good Services:
    * ngRoute (has two methods):
        -> $routeProvider - a provider that will make AJAX calls to load partial views.
        -> $routeParams - allows us to get parameters from URLs.
    * ngCookie $ngCookie - allows us to set cookies easily.

TIPS for "Controller as":

        <div ng-controller = 'myCoolController as mCC'>
            {{mCC.property}}
        </div>
