Function Hoisting
ie.
        awesome();
        function awesome() {
        console.log("too good to be true");
        }
* This code will work, signaling that standalone functions get hoisted to the top of their scope.

-> Therefore:

                                 // JS rearranges your code before running it
        function awesome() {     // the function floated to the top!
          console.log("too good to be true");
        }
        awesome();               // so now awesome is defined before we invoke it!

* that’s function hoisting! Now on to putting it all together:

        varFunction();
        var varFunction = function() {
            console.log("How will this get hoisted?")
        }

    -> code above throws an error that reads “varFunction is not a function”.

- While standalone functions get hoisted, the code above actually assigns a function to a variable.
- We know that variables are hoisted to the top of their scope with an initial value of undefined.

                                // HOW THE JS INTERPRETER REARRANGES THE CODE
        var varFunction;           // the variable declaration gets hoisted to the top
        varFunction();             // this tries to invoke "undefined": we get "undefined
                                    is not a function"
        varFunction = function() {
        console.log("How will this get hoisted?")
        }

Function Scoping~
* JavaScript has function scoping.
    -> means is that the variables that you declare with var inside a function are accessible only
        inside the function they are declared in.

Summary:
    - Each function has access to all the variables in its parent functions.
    - No function has access to the variables in its child functions.
    - You can think of the whole .js file as an outer function when thinking about scope.
