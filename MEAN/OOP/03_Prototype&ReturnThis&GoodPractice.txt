Prototype~
* So let's open up a Chrome developer console and dig in with the following code:

        var MyObjConstructor = function(name){
          var myPrivateVar = "Hello";           // just to show that it is hard to see this private var easily
          this.name = name; // but you can see the name!
          this.method = function(){
            console.log( "I am a method");
          };
        }
        var obj1 = new MyObjConstructor('object1');
        var obj2 = new MyObjConstructor('object2');
        console.log(obj1);

* By clicking to the object in our console, we should see the following:

        method : function...
        name : 'object1'
        __proto__: MyObjConstructor
        constructor: function ...
        __proto__: Object

* this __proto__:
    -> that this stands for prototype, which is 'how objects in JavaScript share properties and methods.'

* Add the following lines of code: Before you run this, though, make some guesses as what is
going to happen?

        obj1.newProperty = "newProperty!";
        obj1.__proto__.anotherProperty = "anotherProperty!";
        console.log(obj1.anotherProperty);       // anotherProperty!
        console.log(obj1.newProperty);          // newProperty!
                                                // What about obj2?
        console.log(obj2.newProperty);          // undefined
        console.log(obj2.anotherProperty);       // anotherProperty! <= THIS IS THE COOL PART!

* the line obj1.newProperty = 'newProperty!' gave obj1 a new property that obj2 couldn't access.
* the code obj1.__proto__.anotherProperty = 'anotherProperty!' can be accessed by both obj1 and obj2.
    -> That's because they both share a prototype object since they're both instances of MyObjConstructor.

NOTE: That's how JavaScript does inheritance!
    -> About that other __proto__ inside the first one:
    -> If you add things to it, those properties or methods can be accessed/invoked via all the objects
     in your program!

* Every object constructor creates a second memory space for all objects created by that constructor that
    is accessed by proto.
    -> It occupies one memory space, so any changes there affect every object spit out by that constructor.

PROS of Prototype
    - One memory space for all!
        -> If you are creating lots of the same object and use prototype, it can save you significant memory
    - Great for general methods for objects
    - We can access prototype methods with just using .method or .property.
    - The interpreter will go through all prototypes in the prototype chain to check if any of
        them have the called method or property before giving up.
        ->  (it'll return/use the first match it finds).

CONS of Prototype
    - Methods generated in prototype cannot access the private variables inside the constructor function
    - Lots of prototypes can be hard to read

* right way of using prototypes:
    ie.
                                // After we create our MyObjConstructor:
        MyObjConstructor.prototype.methodName = function(){
                                //do stuff here!
        }
    more ie.
        function Cat( cat_name ) {
            var name = cat_name;
            this.getName = function() {
            return name;
            };
        }
                            //adding a method to the cat prototype
        Cat.prototype.sayHi = function(){
            console.log('meow');
        };
                            //adding properties to the cat prototype
        Cat.prototype.numLegs = 4;
        var muffin = new Cat('muffin');
        var biscuit = new Cat('biscuit');
        console.log(muffin, biscuit);
                            //we access prototype properties the same way as we would access 'own' properties
        muffin.sayHi();
        biscuit.sayHi();
        console.log(muffin.numLegs);
                            // poor mutant cats: muffin.__proto__.numLegs ++;
                            // doing this to muffin will mess up all the cats!

Returning this~
* Functions, if they are left to themselves, return undefined.
    -> Since methods are just functions set to keys of an object...
        -> if they are not told explicitly to return something, they too return undefined.


                /* ********** Our Node Class **********
                    Generates a node for a singly linked list
                    parameters:
                        val: a numerical value
                    private variables/functions:
                        none:
                    public properties/methods:
                        val: val;
                        next: // another Node or null
                        passThis: a function that passes a console log of this and self.
                ************** END **********   */

    var Node = function(val){
      this.val = val;
      this.next = null;
    }
    Node.prototype.passThis = function(custom_return){
      console.log(this, "this");
      console.log(this.self, "self");
      console.log(custom_return, "My Return");
      return custom_return;
    }
            // ****************** END OF NODE ******************

            /* ************* Singly Linked List Class (SingleList) *****************
                Creates a simple singly linked list class with not too many methods yet!
                parameters: none
                private: none
                public properties:
                  head: first node in the List
                public methods:
                  add: adds a new node based on a value passed in. returns this
                  dequeue: removes the head, and gives it to a callback, if a callback is passed. returns this
                  remove_tail: removes the tail, and gives it to a callback as an argument, only if a callback
                  is passed. returns this.
            ************** END **********   */

    var SingleList= function(){
      this.head = null;
    }
    SingleList.prototype.add = function (val) {
      if (!this.head){
        this.head = new Node(val);
        return this;
      }
      var current = this.head;
      while(current.next){
        current = current.next;
      }
      current.next = new Node(val);
      return this;
    };
    SingleList.prototype.dequeue = function (callback) {
      var eliminatedNode = this.head;
      this.head = this.head.next;
      eliminatedNode.next = null;
      if (typeof(callback)=='function'){
        callback(eliminatedNode);
      }
                            //console.log(this.head); optional
      return this;
    };
                            // Write a remove tail! :)
            // ************************ END OF LIST ************************

    sList = new SingleList();
    sList.add(1).add(2).add(3).add(4).head.next.passThis(sList).dequeue(
      function callback(myNode){
        console.log(myNode.val, "CHAINING INSANITY!");
      })
      .dequeue(
        function anotherCallback(myNode){
          console.log("******************************");
          console.log('Seriously, Stop!', myNode);
        });

* A lot of typing was saved with sList.add().add()â€¦
    -> Hopefully, you can see how useful it is to return the instance of an object.

(Tip) Good OOP Practice ~
* consider adding the instance methods
    -> (those that don't need to access private variables!) by adding it to prototype

*  For example, if you were creating thousands of ninja objects, adding methods to their shared
    prototype would make your program run much faster.
NOTE: balancing prototype and readability should be considered!
    -> (if you are only creating a small number of instances)

ie.
        function Ninja(name){
        this.name = name;                // creating instance variables
        this.distance_traveled = 0;
        }
                                        // creating an instance method
        Ninja.prototype.walk = function() {
        console.log(this.name + ' is walking');
        this.distance_traveled += 1;
        return this;                     // have this method return its own object
        };
        // creating an instance method
        Ninja.prototype.run = function() {
        console.log(this.name + ' is running');
        this.distance_traveled += 5;
        this.displayDistanceTraveled();
        return this;                     // have this method return its own object
        };
                                        //another instance method
        Ninja.prototype.displayDistanceTraveled = function() {
        console.log('distance traveled: ', this.distance_traveled);
        }
                                            // creating instances/objects
        var ninja1 = new Ninja('Jay');
        var ninja2 = new Ninja('Michael');
        var ninja3 = new Ninja('Andrew');

        ninja1.walk().run().walk().run().run();
                                        // because walk/run returns itself, we can chain these methods
                                        // you can also log ninja1 and study it
        console.log(ninja1)
