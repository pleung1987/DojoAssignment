Common Mongoose Commands~

A List and examples of some common Mongoose Commands you may need to use:

                        // Create a Schema for Users
        var UserSchema = new mongoose.Schema({
         name: {type: String},
         age: {type: Number}
        }, {timestamps: true})
                        // Store the Schema under the name 'User'
        mongoose.model('User', UserSchema);
                        // Retrieve the Schema called 'User' and store it to the variable User
        var User = mongoose.model('User');

<Finding all users>

                            // Using the User Schema...
                            // ...retrieve all records matching {}
        User.find({}, function(err, users) {
                             // Retrieve an array of users
                             // This code will run when the DB is done attempting to retrieve all matching records to {}
        })

<Finding all users based on a requirement>
                            // ...retrieve all records matching {name:'Jessica'}
        User.find({name:'Jessica'}, function(err, user) {
                 // Retrieve an array of users matching the name.
                Even if 1 record is found, the result will be an array the size of 1, with 1 object inside.
                (Notice, if we are expecting to retrieve one record, we may want to use findOne and retrieve the object as
                    oppose to an array the size of one.
                 // This code will run when the DB is done attempting to retrieve all matching records to {name:'Jessica'}
        })

<Finding one user>
                            // ...retrieve 1 record (the first record found) matching {}
        User.findOne({}, function(err, user) {
                             // Retrieve 1 object
                             // This code will run when the DB is done attempting to retrieve 1 record.
        })

<Let's create a sample user>
                            // ...create a new instance of the User Schema and save it to the DB.
        var userInstance = new User()
        userInstance.name = 'Andriana'
        userInstance.age = 29
        userInstance.save(function(err){
                             // This code will run when Mongo has attempted to save the record.
                             // If (err) exists, the record was not saved, and (err) contains validation errors.
                             // If (err) does not exist (undefined), Mongo saved the record successfully.
        })

<Delete all users>
                        // ...delete all records of the User Model
        User.remove({}, function(err){
                        // This code will run when the DB has attempted to remove all matching records to {}
        })

<Delete one user>
                        // ...delete 1 record by a certain key/vaue.
        User.remove({_id: 'insert record unique id here'}, function(err){
                        // This code will run when the DB has attempted to remove all
                            matching records to {_id: 'insert record unique id here'}
        })

<Update any records>
                        // ...update any records that match the query
        User.update({name:'Andrinnna'}, {name:'Andriana'}, function(err){
                        // This code will run when the DB has attempted to update the matching record.
        })
                        // another way to update a record
        User.findOne({name: 'Andriana'}, function(err, user){
          user.name = 'Andri'
          user.save(function(err){
                        // if save was successful awesome!
          })
        })

Dependencies for Mongoose ~

* Node.js + Express -
    ->  we'll need a Node server to accept the different HTTP requests we'll need to perform basic CRUD
        (create, read, update, and delete) operations.
* MongoDB -
    -> in order to properly host our database server, we need the mongod daemon running in the background.
    -> The mongo terminal, however, is less recommended
    -> If you properly configure your Mongoose code, your database and collections can be generated automatically
        upon the first write to the DB.
    ->  it's recommended to build your databases through your Mongoose code rather than manually create them
        in the terminal and try to connect.

* Node_modules:
    Mongoose: Mongoose module is how we'll set up the connection to our MongoDB within our Node server.
        -> Mongoose allows us to more properly structure our code for interaction with the DB
        -> Also define all the collections our app needs in the form of Schemas.
        -> Mongoose will be required for connecting the DB, as well as defining all of these schemas.
    EJS: EJS is just a really quick way for us to render views and pass them data, which allows us to focus
        on our Node backend.
    Express: Express and Node together...Express is useful when it comes to handling those incoming HTTP requests!
    Body-parser: Body-Parser will continue to read the data passed by incoming HTTP requests, no matter if it comes
            in as part of the request's body, sent over the URL, or even sent as raw JSON.
