Views~
* What does the client see?
    -> Remember that the client only sees HTML/CSS/JS!
    -> Two ways to serve HTML/CSS/JS -- through 1) Static Content or 2)Templates.

* Static Content -- Serving a static HTML/CSS/JS file from the backend in response to a request.
* Templates -- Using a view/templating engine to generate HTML (PHP, embedded ruby, embedded JavaScript)

Serving Static Content~
*  Express has one of its own Sttic content module that is really easy to use!
    -> Just like we wrote the instructions on how to handle the "/" route in our server.js file we are going
    to add a line that points our express server to a static files folder.

* Update Hello_express with a static folder and add a main.html with content inside.
    -> add app.use funciton in the static folder.
    -> after restarting the server, you should see the HTML page you created when you navigate to
    "localhost:8000/main.html
    -> It is important to note that now all of your static content must go in the static folder including styles
    and static javascript files.
        -> Try adding a CSS file to show that you really understand how the static content works!

Using Templates (EJS)~
* EJS is the templating engine we are going to use
    -> stands for Embedded Javascript.
    -> like express, ejs is a node module that we will need to install for our project.
                            Install: npm install ejs
    ->  add the lines of code into server.js at Hello_express (app.set)

ie. Let's say we wanted to add a route to our app that displays a list of users.
    -> Let's add a new route to our server.js file that will render an ejs view and pass it some user data.
    -> Notice we are passing a JavaScript object to the response.render() method.
    -> When we pass a piece of data to a view, every key-value pair within the larger piece of data becomes
        its own variable.

* Create a new folder called "views" in our project directory
    ->  folder is where we are going to put all of our view files.
    ->  make a view called  users.ejs and put in codes
* Notice the <% %> tags allow us to enter JavaScript code, and the <%=  %> tags actually print
    the JavaScript code to the document.
* Use the tags with the equal sign (=) to actually print values, whereas you'll use the tags without the equals
    sign to invoke loops or use logic (anything that involves JavaScript but doesn't output code).


HTTP Methods ~
* Forms, Data Transferring, and Routing Rules:
    ->  modern internet is user-driven; all the actual content of a website is generated by the users
    of a website.
** How does the user manage to get his or her data to the page??
    ANSWER: by Forms
    -> The HTML forms you used to build is the way in which users are able to pass data to the back end of a
     website where it can be processed and stored.
    -> Designing forms and processing the information correctly is a huge part of what it takes to become a
     back-end developer.

HTTP Methods: GET and POST ~
    * GET is a request for passing insensitive information
        -> If the information is like a library search or something insensitive, it's OK to use GET as your method.
    * POST is a request for passing sensitive information.
        -> If your form data contains password data, credit card numbers, SSNs, etc, please use POST!

GET
    -> GET requests are sent as part of the URL
    ie. When you do a Google search, your search term appears in the resulting URL?
    -> GET requests can be cached, and will even remain stored in your browser's history!
So why use GET at all??
    -> GET requests can be bookmarked!
        -> lets you bookmark routes on say Google Earth or image results on a search engine.

POST
    -> POST requests send data behind the scenes ->  in the HTTP message body.
    -> They're never cached, they don't linger in your browser history.
        -> thus: they can't be bookmarked
    -> No restrictions on how much data you can send.
    -> Vast majority of HTTP request methods you'll be dealing with will be POSTs.
NOTE: Forms that control user registration, user authentication, user authorization, database inserts, updates,
        and deletes, all of these will be sent by the POST method.

    ~ POST, GET, & SESSION ~

Routing~
    In Express we will assign all of our routing rules using the syntax:

        app.HTTP_VERB('URL', function (req, res){});    // HTTP_VERB is either 'get' or 'post' etc...

* So let's say we were working in a RESTful environment and we wanted to make the route
    for creating a new user:


                                            // root route
                app.get('/', function (req, res){
                res.render('index', {title: "my Express project"});
                });
                                            // route to process new user form data:
                app.post('/users', function (req, res){
                                            //code to add user to db goes here!
                })

    NOTE: all of these routes must go above where we tell the server to listen.

Redirecting ~
    * After we do anything with the handler of the POST request(provided there are no errors)
        ->  we need to redirect
    * Revisiting code above, have the code redirect the user back to the root route:

                                            // root route
                app.get('/', function (req, res){
                res.render('index', {title: "my Express project"});
                });
                                            // route to process new user form data:
                app.post('/users', function (req, res){
                                            // code to add user to db goes here!
                                            // redirect the user back to the root route.
                                            // All we do is specify the URL we want to go to:
                res.redirect('/');
                })

POST data ~
    * In order to be able to access POST data, we need to be able to pull it out of the request object.
        -> due to being lightweight and flexible as possible:
            ->  Express doesn't have a good way to handle post-data inherently.
        -> How to handle post-data inherently?
            -> A node module called 'body-parser'

* After installing body-parser (you should be very familiar with npm install by now), require it and tell the
    express server to use it like so:

                                            // require body-parser
                var bodyParser = require('body-parser');
                                            // use it!
                app.use(bodyParser.urlencoded({extended: true}));

ie.
    Let's say in an index.ejs view file we had a form that looked like this:

                <form action='/users' method='post'>
                    Name: <input type='text' name='name'>
                    Email: <input type='text' name='email'>
                    <input type='submit' value='create user'>
                </form>

    NOTE: To be unversally translated, expect form data to be JSON!

* Here's how we get the form data:

                                            // route to process new user form data:
                app.post('/users', function (req, res){
                console.log("POST DATA \n\n", req.body)
                                            //code to add user to db goes here!
                                            // redirect the user back to the root route.
                res.redirect('/')
                });

Data from URL (GET data)
    *  Say we wanted to show the information of a specific user:
    -> The RESTful route:
                users/:id       //where :id is the id of a particular user.  HTTP method is GET

* Setting this up in Express is easy; in our server.js file we would just add the route:

        app.get("/users/:id", function (req, res){
        console.log("The user id requested is:", req.params.id);
                                            // just to illustrate that req.params is usable here:
        res.send("You requested the user with id: " + req.params.id);
                                            // code to get user from db goes here, etc...
        });

NOTE: This illustrates accessing data from the URL.
    -> test this out, add a button on the view that sends a request to "/users/1" (trying to access the
     page with information about the user with id = 1).

Post NOTE: Post request to "/users" and a get request to "/users" are two completely different routes
            because a route is made up of the verb + the URL.

* Any data you wish to pass via the URL must be indicated by a ':'
    ->  It will then be available in the req.params object.

Session data ~
    * Session data is almost never used in the MEAN stack.
        -> If you do need to use it you have to install and require the express-session module first.
    * After installing go to your server.js file and require it like so:
        ie.
                                                        // new code:
                    var session = require('express-session');
                                                        // original code:
                    var app = express();
                                                        // more new code:
                    app.use(session({secret: 'codingdojorocks'}));  // string for encryption

    * within any of your routes, there will be an object called req.session.
        -> It is an object and you can assign properties to it.

            ie.
                    app.post('/users', function (req, res){
                                                // set the name property of session.
                    req.session.name = req.body.name;
                    console.log(req.session.name);
                                                //code to add user to db goes here!
                                                // redirect the user back to the root route.
                    res.redirect('/');
                    });
                    
    * now req.session.name will be available to any other route afterward.
